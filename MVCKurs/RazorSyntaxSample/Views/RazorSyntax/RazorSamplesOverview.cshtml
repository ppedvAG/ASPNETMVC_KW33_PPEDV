@model RazorSyntaxSample.Models.Person;
@{
    ViewData["Title"] = "RazorSamplesOverview";
}

<h1>RazorSamplesOverview</h1>

<p>Was ist Razor?</p>
<p>Ist ein TemplateSystem + Möglichkeiten, wie man Objecte in HTML am besten verwenden kann</p>

<p>Was ist ein Template-System in HTML?</p>
<p>Ein Templatesystem ermöglicht in HTML, Objekte via Platzhalter auszugeben und auch Formulare mit Objekte erstellen kann</p>



<p>Einfache Ausgaben mit Model: @Model.FirstName @Model.LastName</p>

<p>Wie kann man ein [AT]-Zeichen ausgeben -> @@Model.FirstName</p> @*Ausgabe:@Model.FirstName*@

@*Kommentare für Razor*@
<!-- normalen HTML Kommentare und diese sind nicht so fähig wie die Razor-Kommentare -->

<p>Direktes verwenden von .NET Core Objects z.B: Zeitausgabe: @DateTime.Now</p>

<p>Wir können auch Inline-Berechnungen durchführen z.B: Datum vor einer Woche: @(DateTime.Now - TimeSpan.FromDays(7))</p>


<p>Mulitple Codeblock: </p>

@{
    Person person1 = new Person() { Id = 123, FirstName = "Alf", LastName = "Katzenversteher" };
}

<p>Ausgabe des lokalen Personen - Objektes </p>
<p>@person1.FirstName @person1.LastName</p>


@Html.Raw("<b>Hello World </b>")
@* &lt;span&gt;Hello World&lt;/span&gt; *@


@{
    void RenderName(string name)
    {
        <p>Name: <strong>@name</strong></p>
    }

    RenderName("Mahatma Gandhi");
    RenderName("MartinLuther King, Jr.");
}



@*Steuerstrukturen*@

@{

     IList<Person> persons = new List<Person>();
     persons.Add(new Person { Id = 1, FirstName = "Andre", LastName = "Ruhland" });
     persons.Add(new Person { Id = 2, FirstName = "Hannes", LastName = "Preishuber" });
}


@foreach (Person currentPerson in persons)
{
    @currentPerson.FirstName 
    <br/>
    @currentPerson.LastName
    <br/>
}

@{
    Person[] personenArray = persons.ToArray();

    for (int count = 0; count < personenArray.Length; count++ )
    {
         Person person2 = personenArray[count];

        <p>@person2.FirstName</p>
        <br />
        @person2.LastName 
        <br />
        <p>--------------------------------</p>
    }
}



@* 7.2.3 @while *@
@{int i = 0; }
@while (i < personenArray.Length)
{
    var person3 = personenArray[i];
    <p>FirstName: @person3.FirstName</p>
    <p>LastName: @person3.LastName</p>

    i++;
}

@* 7.2.4 @do while *@

@{i = 0; }
@do
{
    var person4 = personenArray[i];
    <p>FirstName: @person4.FirstName</p>
    <p>LastName: @person4.LastName</p>

    i++;
} while (i < personenArray.Length);




@*IF-STATEMENT*@
@{
    int value = 4;
}

@if (value % 2 == 0)
{
    <p>the value is even</p>
}

@{
    //wenn 2022 dann blau, wenn nicht, dann rot 
    string color = DateTime.Now.Year == 2022 ? "blue" : "red";
    <p>@color</p>
}

@* 7.1.2 else und else if erfordern kein @-Symbol: *@
@if (value % 2 == 0)
{
    <p>The value was even.</p>
}
else if (value >= 1337)
{
    <p>The value is large.</p>
}
else
{
    <p>The value is odd and small.</p>
}

@*  7.1.3 switch-Anweisung *@
@switch (value)
{
    case 1:
        <p>The value is 1!</p>
        break;
    case 1337:
        <p>Your number is 1337!</p>
        break;
    default:
        <p>Your number wasn't 1 or 1337.</p>
        break;
}


@*FORMULARE*@

<!--HTML Variante-->
<form></form>

<!-- Formular -->
@using (Html.BeginForm())
{
    <div>
        Email: <input type="email" id="Email" value="">
        <button>Register</button>
    </div>
} @*//Dispose*@


@*Dinge die in Razor komisch sind: *@

@try
{
    throw new InvalidOperationException("You did something invalid.");
}
catch (Exception ex)
{
    <p>The exception message: @ex.Message</p>
}
finally
{
    <p>The finally statement.</p>
}



@* 7.5 @lock *@
@*@lock (obj)
{
    // Do critical section work
}*@

@using (Person person = new Person())
{

}


@section Scripts {
    <script>
        $(document).ready(function () {
            alert("Test");
        });
    </script>


   @*<script type="text/javascript" src="~/scripts/site.js"></script>*@
}